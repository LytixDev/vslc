// 
// Compiler declarations start
//

struct Token := kind: s32 
struct AstLiteral := kind: s32

compiler func make_literal(token: Token): ^AstLiteral

//
// Compiler declarations end
//


func LogEveryCall(node: ^AstNode): ^AstNode
begin
    var func_node: ^AstFunc, func_name: Str8, func_body: ^AstStmt 
    var print_expr: ^AstExpr, print_node: ^AstPrint
    if node.kind != AstNodeKind.AST_FUNC then return node

    // func_node := node as ^AstFunc // cast
    func_name := func_node.name
    func_body := func_node.stms
    
    // The print could be something like:
    // Calling func_name with a = x, b = y, c = z.
    print_expr := make_literal(func_name.token)
    print_node := make_single(AstNodeKind.STMT_PRINT, print_expr)

    func_node.stmts := ast_list_push_back(func_stmts, print_node)
    return node
end


@LogEveryCall()
func add(a: s32, b: s32): s32
begin
    return a + b
end


@LogEveryCall()
func sub(a: s32, b: s32): s32
begin
    return a - b
end


func main(): s32
begin
    add(40, 2)
    sub(44, 2)
    return 0
end
